---
import DefaultLayout from "../../layouts/DefaultLayout.astro";
import "../../styles/global.css";
---

<DefaultLayout>
    <section class="w-full px-6 pt-40 pb-20 max-w-6xl mx-auto text-white">
        <h1
            class="text-4xl md:text-5xl font-extrabold mb-12 text-cyan-400 text-center"
        >
            ¿Qué es un sistema RAG? (Retrieval-Augmented Generation)
        </h1>

        <p class="text-lg text-white/70 text-center max-w-3xl mx-auto mb-20">
            Un RAG es un sistema que combina la recuperación de información con
            la generación de texto, permitiendo a modelos como ChatGPT responder
            usando datos externos y actualizados. Aquí tienes una representación
            visual y detallada del proceso.
        </p>

        <!-- Diagrama visual explicativo -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-20">
            <div
                class="bg-[#0f0f0f] border border-white/10 p-6 rounded-2xl shadow-md hover:border-cyan-400/30"
            >
                <div class="text-3xl mb-4">🙋‍♂️</div>
                <h2 class="text-cyan-400 font-bold text-lg mb-2">
                    1. Consulta del usuario
                </h2>
                <p class="text-white/70 text-sm">
                    El usuario introduce una pregunta o instrucción, por
                    ejemplo: "¿Cuál fue la facturación del último trimestre?"
                </p>
            </div>

            <div
                class="bg-[#0f0f0f] border border-white/10 p-6 rounded-2xl shadow-md hover:border-cyan-400/30"
            >
                <div class="text-3xl mb-4">🧠</div>
                <h2 class="text-cyan-400 font-bold text-lg mb-2">
                    2. Vectorización de la consulta
                </h2>
                <p class="text-white/70 text-sm">
                    La consulta se transforma en un vector (embedding) usando
                    modelos como OpenAI o Cohere para permitir búsquedas
                    semánticas.
                </p>
            </div>

            <div
                class="bg-[#0f0f0f] border border-white/10 p-6 rounded-2xl shadow-md hover:border-cyan-400/30"
            >
                <div class="text-3xl mb-4">🗂️</div>
                <h2 class="text-cyan-400 font-bold text-lg mb-2">
                    3. Búsqueda en base de datos vectorial
                </h2>
                <p class="text-white/70 text-sm">
                    Se realiza una búsqueda en una base como Pinecone, Weaviate
                    o FAISS para encontrar documentos relevantes relacionados.
                </p>
            </div>

            <div
                class="bg-[#0f0f0f] border border-white/10 p-6 rounded-2xl shadow-md hover:border-cyan-400/30"
            >
                <div class="text-3xl mb-4">📄</div>
                <h2 class="text-cyan-400 font-bold text-lg mb-2">
                    4. Recuperación de contexto
                </h2>
                <p class="text-white/70 text-sm">
                    Se recuperan los fragmentos más similares y relevantes.
                    Estos textos serán enviados al modelo generativo como
                    contexto.
                </p>
            </div>

            <div
                class="bg-[#0f0f0f] border border-white/10 p-6 rounded-2xl shadow-md hover:border-cyan-400/30"
            >
                <div class="text-3xl mb-4">🤖</div>
                <h2 class="text-cyan-400 font-bold text-lg mb-2">
                    5. Generación de respuesta (LLM)
                </h2>
                <p class="text-white/70 text-sm">
                    El modelo de lenguaje genera una respuesta natural y
                    coherente utilizando el contexto recuperado como parte del
                    prompt.
                </p>
            </div>

            <div
                class="bg-[#0f0f0f] border border-white/10 p-6 rounded-2xl shadow-md hover:border-cyan-400/30"
            >
                <div class="text-3xl mb-4">📬</div>
                <h2 class="text-cyan-400 font-bold text-lg mb-2">
                    6. Entrega al usuario
                </h2>
                <p class="text-white/70 text-sm">
                    La respuesta final se entrega al usuario. Es precisa,
                    actualizada y basada en los documentos reales.
                </p>
            </div>
        </div>

        <!-- Explicación final -->
        <div
            class="text-center max-w-3xl mx-auto text-white/70 text-base leading-relaxed"
        >
            <p class="mb-6">
                Este enfoque permite construir asistentes inteligentes con
                memoria externa, ideales para empresas que quieren respuestas
                basadas en su propio contenido: PDFs, manuales, páginas web,
                emails o bases de datos.
            </p>
            <p class="mb-10">
                En <strong class="text-cyan-400">Vectoriza.me</strong> diseñamos
                sistemas RAG personalizados para que puedas ofrecer una experiencia
                de IA con conocimiento real y actualizado, sin alucinar ni inventar
                información.
            </p>
            <a
                href="/#finalcta"
                class="inline-block px-8 py-4 bg-cyan-400 hover:bg-cyan-500 text-black font-semibold rounded-full shadow-[0_0_20px_rgba(0,255,255,0.3)] hover:shadow-[0_0_40px_rgba(0,255,255,0.5)] transition-all text-lg"
            >
                🚀 Quiero implementar un RAG en mi empresa
            </a>
        </div>
    </section>
</DefaultLayout>
